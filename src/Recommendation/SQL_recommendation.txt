Les injections SQL font partie de la catégorie des vulnérabilités par injection de code au même titre que les injections XSS. Il s’agit d’ajouter une requête non prévue à une requête SQL pour interagir avec la base de données. Une faille SQLi permet de voler ou modifier des données, voire exécuter du code à distance.

Comment s'en protéger?

Au niveau du code PHP:
- Filtrer les entrées de l'utilisateur. Tout ce que l'utilisateur peut soumettre au serveur est considéré comme contenu étranger et potentiellement hostile. Donc, avant de laisser passer ses entrées, il faut les filtrer.
On peut tout simplement échapper les caractères spéciaux contenus dans les chaines de caractères soumises en utilisant des fonctions PHP comme addslashes() ou mysql_real_escape_string(). On peut également appliquer les expressions régulières pour vérifier si la chaine représente un tel motif comme par la fonction preg_match() et aussi vérifier la longueur de la chaine par la fonction strlen().

- Utiliser l'objet PDO. Il apporte une immunité totale contre les injections SQL si on sépare les données du traitement (les requêtes préparées avec les marqueurs interrogatifs ou paramètres nommés).

- Faire une authentification en deux temps. Au lieu de vérifier le login et le mot de passe dans la même requête, on sépare ce traitement en deux. On demande d'abord le login, et si celui-ci est correcte on demande ensuite le mot de passe.

Au niveau de la configuration du serveur :
- En modifiant le dichier de configuration du moteur php appelé php.ini. Il s'agit d'un fichier texte qui contient un ensemble de directives qui permettent de personnaliser certains aspects du comportement du moteur PHP. "magic_quotes_gpc" peut-être utilisé pour échapper automatiquement les caractères spéciaux présents dans les chaines de caractères entrantes (qui proviennent des formulaires, barre URL et cookies). 
Elle agit en fait comme la fonction addslashes() mais d'une manière automatisées. -> "magic_quotes_gpc = On"